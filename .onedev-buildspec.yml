version: 19
stepTemplates:
- name: Checkout Code and Set Build Version
  steps:
  - !CheckoutStep
    name: Checkout Code
    cloneCredential: !DefaultCredential {}
    withLfs: true
    withSubmodules: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: Write Build Version to file:BUILD_VERSION
    runInContainer: true
    image: python:3.11
    interpreter: !DefaultInterpreter
      commands:
      - CURRENT_BRANCH=$(git branch --show-current)
      - if [ "$CURRENT_BRANCH" != "master" ]; then
      - '  export BUILD_VERSION="$(python setup.py --version)$CURRENT_BRANCH@build_number@"'
      - else
      - '  export BUILD_VERSION="$(python setup.py --version)"'
      - fi
      - echo "$BUILD_VERSION" > BUILD_VERSION
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !SetBuildVersionStep
    name: Set Build Version
    buildVersion: '@file:BUILD_VERSION@'
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
- name: Execute Tests
  steps:
  - !UseTemplateStep
    name: Checkout Code and Set Build Version
    templateName: Checkout Code and Set Build Version
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: Run Pytest
    runInContainer: true
    image: python:3.11
    interpreter: !DefaultInterpreter
      commands:
      - pip install -e .[test]
      - pytest
      - ruff check . --fix
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
- name: Trial Docker Container Build
  steps:
  - !UseTemplateStep
    name: Checkout Code and Set Build Version
    templateName: Checkout Code and Set Build Version
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !BuildImageStep
    name: Build Docker Container
    tags: '@build_version@'
    publish: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
- name: Push Docker Container to Dockerhub
  steps:
  - !UseTemplateStep
    name: Checkout Code and Set Build Version
    templateName: Checkout Code and Set Build Version
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: Publish to Docker Hub
    runInContainer: true
    image: docker
    interpreter: !DefaultInterpreter
      commands:
      - dockerhub_user=@secret:docker_hub_user@
      - build_version=@build_version@
      - '# wrapped in quotes to prevent issues with $ in passwords'
      - echo '@secrets:docker_hub_password@' | docker login -u $dockerhub_user --password-stdin
      - docker build -t $dockerhub_user/@project_name@:$build_version -t $dockerhub_user/@project_name@:latest
        .
      - docker push --all-tags $dockerhub_user/@project_name@
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
- name: Publish Package on Pypi
  steps:
  - !UseTemplateStep
    name: Checkout Code and Set Build Version
    templateName: Checkout Code and Set Build Version
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: Publish to PyPI
    runInContainer: true
    image: python:3.11
    interpreter: !DefaultInterpreter
      commands:
      - pip install setuptools wheel twine
      - python setup.py sdist bdist_wheel
      - '# wrapped in quotes to prevent issues with $ in passwords'
      - twine upload dist/* -u @secret:pypi_user@ -p '@secret:pypi_password@'
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
- name: Sync to GitHub
  steps:
  - !UseTemplateStep
    name: Checkout Code and Set Build Version
    templateName: Checkout Code and Set Build Version
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: Sync to GitHub
    runInContainer: true
    image: alpine/git:1.0.7
    interpreter: !DefaultInterpreter
      commands:
      - '#git config --global --unset http.extraHeader'
      - '#gh_user=@secrets:github_user@'
      - '#gh_token=@secrets:github_token@'
      - '#git push -f https://$gh_user:$gh_token@@github.com/$gh_user/@project_name@.git
        HEAD:main'
      - '#git push -f https://github.com/$gh_user/@project_name@.git HEAD:main'
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !PushRepository
    name: Sync to Github
    remoteUrl: https://github.com/@secret:github_user@/@project_name@.git
    passwordSecret: github_token
    withLfs: true
    force: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
jobs:
- name: Pull Request Review
  jobExecutor: docker-executor
  steps:
  - !UseTemplateStep
    name: Execute Tests
    templateName: Execute Tests
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !UseTemplateStep
    name: Trial Docker Container Build
    templateName: Trial Docker Container Build
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  triggers:
  - !PullRequestUpdateTrigger {}
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 3600
- name: Update Master or Dev
  jobExecutor: docker-executor
  steps:
  - !UseTemplateStep
    name: Execute Tests
    templateName: Execute Tests
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !UseTemplateStep
    name: Push Docker Container to Docker Hub
    templateName: Push Docker Container to Dockerhub
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !UseTemplateStep
    name: Publish Package on PyPI
    templateName: Publish Package on Pypi
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !UseTemplateStep
    name: Sync master to Github
    templateName: Sync to GitHub
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  triggers:
  - !BranchUpdateTrigger
    branches: master dev
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 3600
